service: () -> {
    addBook: (record {attachmentUrl:text; title:text; availableCopies:nat64; reservePrice:nat64; description:text; author:text; category:text}) -> (variant {Ok:record {id:text; attachmentUrl:text; title:text; availableCopies:nat64; reservePrice:nat64; borrowedBy:opt text; reservor:principal; dueDate:opt nat64; description:text; author:text; category:text; reservedBy:opt text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    addReservedBook: (text, text) -> (variant {Ok:record {id:text; name:text; role:text; reservedBooks:vec text; borrowedBooks:vec text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    addUser: (record {name:text; role:text}) -> (variant {Ok:record {id:text; name:text; role:text; reservedBooks:vec text; borrowedBooks:vec text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    borrowBook: (text, text) -> (variant {Ok:record {id:text; name:text; role:text; reservedBooks:vec text; borrowedBooks:vec text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    checkAvailability: (text) -> (bool) query;
    completeReserve: (principal, text, nat64, nat64, nat64) -> (variant {Ok:record {status:variant {PaymentPending:text; Completed:text}; memo:nat64; reservor:principal; BookId:text; price:nat64; paid_at_block:opt nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    createReserveOrder: (text) -> (variant {Ok:record {status:variant {PaymentPending:text; Completed:text}; memo:nat64; reservor:principal; BookId:text; price:nat64; paid_at_block:opt nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    deleteBook: (text) -> (variant {Ok:record {id:text; attachmentUrl:text; title:text; availableCopies:nat64; reservePrice:nat64; borrowedBy:opt text; reservor:principal; dueDate:opt nat64; description:text; author:text; category:text; reservedBy:opt text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    deleteUser: (text) -> (variant {Ok:record {id:text; name:text; role:text; reservedBooks:vec text; borrowedBooks:vec text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    filterBooksByCategory: (text) -> (vec record {id:text; attachmentUrl:text; title:text; availableCopies:nat64; reservePrice:nat64; borrowedBy:opt text; reservor:principal; dueDate:opt nat64; description:text; author:text; category:text; reservedBy:opt text}) query;
    getAddressFromPrincipal: (principal) -> (text) query;
    getBook: (text) -> (variant {Ok:record {id:text; attachmentUrl:text; title:text; availableCopies:nat64; reservePrice:nat64; borrowedBy:opt text; reservor:principal; dueDate:opt nat64; description:text; author:text; category:text; reservedBy:opt text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getBooks: () -> (vec record {id:text; attachmentUrl:text; title:text; availableCopies:nat64; reservePrice:nat64; borrowedBy:opt text; reservor:principal; dueDate:opt nat64; description:text; author:text; category:text; reservedBy:opt text}) query;
    getUsers: () -> (vec record {id:text; name:text; role:text; reservedBooks:vec text; borrowedBooks:vec text}) query;
    returnBook: (text, text) -> (variant {Ok:record {id:text; name:text; role:text; reservedBooks:vec text; borrowedBooks:vec text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    searchBooks: (text) -> (variant {Ok:vec record {id:text; attachmentUrl:text; title:text; availableCopies:nat64; reservePrice:nat64; borrowedBy:opt text; reservor:principal; dueDate:opt nat64; description:text; author:text; category:text; reservedBy:opt text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    updateBook: (record {id:text; attachmentUrl:text; title:text; availableCopies:nat64; reservePrice:nat64; borrowedBy:opt text; reservor:principal; dueDate:opt nat64; description:text; author:text; category:text; reservedBy:opt text}) -> (variant {Ok:record {id:text; attachmentUrl:text; title:text; availableCopies:nat64; reservePrice:nat64; borrowedBy:opt text; reservor:principal; dueDate:opt nat64; description:text; author:text; category:text; reservedBy:opt text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    updateUser: (record {id:text; name:text; role:text; reservedBooks:vec text; borrowedBooks:vec text}) -> (variant {Ok:record {id:text; name:text; role:text; reservedBooks:vec text; borrowedBooks:vec text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    verifyPayment: (principal, nat64, nat64, nat64) -> (bool) query;
}
